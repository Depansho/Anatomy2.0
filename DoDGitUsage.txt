Git Usage
Branching
Proper git-based development advice to develop each (independent) feature in a separate topic branch. This enables to switch between different working contexts very easily.
To create such a branch and to check it out to start working you do:


git checkout -b your-branch-name

where your-branch-name needs to be replaced appropriately. This creates a new branch based on the one currently checked out in your working copy. To start from a different start point, for example from the development branch, to start a new feature do


git checkout -b your-branch-name development




Commit early and often
Once you have achieved reasonable progress, you might want to commit the changes. To do so, you need to tell git what files should be included in the commit by adding them to a staging area. This area is meant to give you a chance to properly compose your commit, possibly even taking only a few changes but not all of a single file, e.g. if it makes sense to separate them. Add files like the following


git add a-modified-file.h a-newly-created-file.cpp


Describing Commits
To make is easier to use git tools we have a specific format we expect from commit messages. It is:
Component: Very short description of change

Longer text describing the change.

The subject is a brief explanation of the change and may not exceed 60 characters in length. It should start with a component name, e.g. the name of a plugin the code belongs to. The subject line has a specific relevance. Many git tools (e.g. gitk) show only the first line in the default view and therefore this line should be short and concise. Then follows an empty line and then a longer text describing the change in more detail. If you think you cannot fit the change in your subject chance is that you should break up the commits in more smaller commits. The longer text can be omitted if the subject line is already sufficiently clear. In the longer message think that you need to explain the change to someone else. An example:


overview: added thumbnails of models

Added table with model thumbnail and links to the models. Implemented access to database to get the thumbnail-url.


Push it
So far, you have only committed to your own branch in your own (local) clone of the repository. To share your development with others, you should push your branch to another repository. We have central repositories at ??? that we use to share code with each other. The process of copying your changes to another repositories is called pushing. To push your local branch do:


git push origin name-of-local-branch:name-of-remote-branch


If you push with the option --set-upstream, you can in the future just use


git push


Merging/Pull-Requests
Merging is the process of integrating a branch into another one. There are two main scenarios where a merge is required: merging a topic branch into the development branch, or merging many topic branches into a temporary merge branch (often called “current”).
If you want to merge your branch into the development branch, create a pull-request. Another developer then merges and reviews the branch. After checking if everything still works, the reviewer can push the updated development branch.
You can merge changes with:


git merge topic-branch

This assumes that the branch in which to merge the topic branch is currently checked out, i.e. the branch named "development" is checked out.


If we have a stable development version (e.g. after a sprint), we can merge the development branch into the master branch.


Tips and Tricks


To add specific parts that you changed but not all use the -p parameter like so:


git add -p a-modified-file.h a-newly-created-file.cpp


This will bring up an interactive mode to stage only specific changes




Delete old local branches from remote with:


git fetch --prune


You can put changes on hold for later, for example to cleanup the tree or to switch to a different topic branch to work on a different subject. To stash them away do


git stash
# Or alternatively with a useful description:
git stash save "unfinished code for ..."

You can list and view those stashes with
git stash list
git stash show

To retrieve a stash you have two options. The apply sub-command will retrieve the stash contents and apply them to the current state of the working copy. The pop sub-command will additionally drop the stash if it was successful in applying it. The drop command drops the stash without applying it.


git stash apply
git stash drop
git stash pop

The stashes are organized as a stack. Without a parameter, all stash commands operate on the most recent stash.


(trac.fawkesrobotics.org/wiki/GitNotes)